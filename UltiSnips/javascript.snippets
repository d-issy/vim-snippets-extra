##############################
# Symbol
##############################
priority -3
snippet /\s*\?/ "" r
 ? ${2} : ${0}
endsnippet

priority 0
##############################
# import / require
##############################
snippet im "import" b
import ${1} from '${2:${1/\w/\l$0/}}'
${0}
endsnippet

snippet imas "import as" b
import * as ${1} from '${2:${1/\w/\l$0/}}'
${0}
endsnippet

snippet imm "import " b
import { ${1} } from '${2}'
${0}
endsnippet

snippet req "" w
require('${1}')${0}
endsnippet

##############################
# variable
##############################
snippet /\bl(et)?/ "let" r
let ${1} = ${0}
endsnippet

snippet /\bc(on(st)?)?/ "const" r
const ${1} = ${0}
endsnippet

snippet t "this." w
this.
endsnippet

##############################
# statement
##############################
snippet if "if" b
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if else" b
if (${1}) {
	${0}
} else {
}
endsnippet

snippet /(\}\s*)?el(se)?/ "else" r
`!p
if match.group(0).startswith('}'):
	snip.rv = '} '
`else {
	${0}
}
endsnippet

snippet /(}\s*)?elif/ "" r
`!p
if match.group(0).startswith('}'):
	snip.rv = '} '
`else if ${1} {
	${0}
}
endsnippet

snippet /sw(itch)?/ "switch" r
switch (${1}) {
	${0}
}
endsnippet

snippet case "case" b
case ${1}:
	${0}
	break
endsnippet

snippet try "try" b
try {
	${0}
} catch (${1:e}) {
	${2}
}
endsnippet

snippet tryf "try finally" b
try {
	${0}
} catch (${1:e}) {
	${2}
} finally {
	${3}
}
endsnippet

snippet /(}\s*)?fin(ally)?/ "" r
`!p
if match.group(0).startswith('}'):
	snip.rv = '} '
`finally ${1} {
	${0}
}
endsnippet

snippet /err/ "throw Error" r
throw new Error('${1}')${0}
endsnippet

snippet r "return" b
return ${0}
endsnippet

##############################
# function
##############################
snippet f "function" w
function(${1}) {
	${0}
}
endsnippet

snippet fn "function" b
function ${1}(${2}) {
	${0}
}
endsnippet

snippet /\s*=>/ "function" r
 => {
	${0}
}
endsnippet

snippet af "function" w
${1/([^,]+)?(,)?.*/(?1::\()(?2:\(:)/}${1}${1/([^,(])*(,)?.*/(?1::\))(?2:\))/} => {
	${0}
}
endsnippet

snippet caf "function" b
const ${1} = (${2}) => {
	${0}
}
endsnippet


snippet /bind?/ "bind this" r
this.${1} = this.$1.bind(this)${0}
endsnippet

##############################
# class
##############################
snippet /\bcla(ss)?/ "class" r
class ${1} {
	${0}
}
endsnippet

snippet cle "" b
class ${1} extends ${2} {
	constructor(${3}) {
		${3/(.+)?/(?1:super\($1\))/}${0}
	}
}
endsnippet

snippet cnt "" b
constructor(${3}) {
	${3/(.+)?/(?1:super\($1\))/}${0}
}
endsnippet


##############################
# object
##############################
snippet /:/ "" r
: ${0}
endsnippet

snippet /{/ "" r
{
	${0}
}
endsnippet

##############################
# array
##############################
snippet map "" w
map${1/([^,])*(,)?.*/(?2:\()/}(${1}${1/([^,])*(,)?.*/(?2:\))/} => {
	${0}
})
endsnippet

snippet fore "" w
forEach${1/([^,])*(,)?.*/(?2:\()/}(${1}${1/([^,])*(,)?.*/(?2:\))/} => {
	${0}
})
endsnippet

snippet fil "" w
filter${1/([^,])*(,)?.*/(?2:\()/}(${1}${1/([^,])*(,)?.*/(?2:\))/} => ${0})
endsnippet

##############################
# string
##############################
snippet tos "" w
toString()${0}
endsnippet

##############################
# json
##############################
snippet jp "" w
JSON.parse(${0})
endsnippet

snippet js "" w
JSON.stringify(${0})
endsnippet

##############################
# fetch
##############################
snippet fe "" w
fetch('${1}')${0}
endsnippet

snippet then "" w
then(${1} => ${0})
endsnippet

snippet catch "" w
catch(${1:err} => {
	console.error($1)${0}
})
endsnippet


##############################
# window
##############################
snippet sett "" w
setTimeout(${2:(${3}) => {
	${0}
}}${1/(.+)/(?1:, )/}${1:1000}${3/(.+)/(?1:, $1)/})
endsnippet

snippet seti "" w
setInterval(${2:(${3}) => {
	${0}
}}${1/(.+)/(?1:, )/}${1:1000}${3/(.+)/(?1:, $1)/})
endsnippet

snippet clt "" w
clearTimeout(${1})${0}
endsnippet

##############################
# dom
##############################
snippet d "" w
document.
endsnippet

snippet get "" w
getElement${1/(T|C)?.*/(?1:s)/}By${1:I}${1/(^I$)?(^T$)?(^C$)?.*/(?1:d)(?2:agName)(?3:lassName)/}('${2}')${0}
endsnippet

snippet geti "" w
getElementById('${2}')${0}
endsnippet

snippet gc "" w
getElementsByClassName('${1}')${0}
endsnippet

snippet gt "" w
document.getElementsByTagName('${1}')${0}
endsnippet

snippet qs "" w
querySelector('${1}')${0}
endsnippet

snippet qsa "" w
querySelectorAll('${1}')${0}
endsnippet

snippet adde "" w
addEventListener('${1:click}', ${2})${0}
endsnippet

snippet remo "" w
removeEventListener('${1:click}', ${2})${0}
endsnippet

snippet cr "" w
createElement('${1}')${0}
endsnippet

snippet crt "" w
createTextNode('${1}')${0}
endsnippet

snippet cra "" w
createAttribute('${1}')${0}
endsnippet

snippet app "" w
appendChild(${1})${0}
endsnippet

snippet rmc "" w
removeChild(${1})${0}
endsnippet

snippet seta "" w
setAttribute('${1}', '${2}')${0}
endsnippet

snippet setan "" w
setAttributeNode('${1}')${0}
endsnippet

snippet inb "" w
insertBefore(${1:new}, ${2:exist})${0}
endsnippet

##############################
# event
##############################
snippet pd "" w
preventDefalt()${0}
endsnippet

##############################
# debug
##############################
snippet de "" b
debugger
endsnippet

snippet cl "" b
console.log(${1:${VISUAL}})${0}
endsnippet

snippet cd "" b
console.debug(${1:${VISUAL}})${0}
endsnippet

snippet ce "" b
console.error(${1:${VISUAL}})${0}
endsnippet

snippet cw "" b
console.warn(${1:${VISUAL}})${0}
endsnippet

snippet ci "" b
console.info(${1:${VISUAL}})${0}
endsnippet

snippet ct "" b
console.table(${1:${VISUAL}})${0}
endsnippet

##############################
# react
##############################
## import
snippet ir "import react" b
import React from 'react'
${0}
endsnippet

snippet irc "import react component" b
import React, {Component} from 'react'
${0}
endsnippet

snippet ird "import react dom" b
import ReactDOM from 'react-dom'
${0}
endsnippet

##############################
# export
##############################
snippet e "" b
export ${0}
endsnippet

snippet ed "" b
export default ${0:`!p snip.rv = snip.basename`}
endsnippet

snippet me "" b
module.exports = ${0}
endsnippet

## component
snippet rcc "react component" b
class ${1:App} extends React.Component {
	constructor(props) {
		super(props)
	}

	render() {
		return ${0:<div />}
	}
}
endsnippet

snippet rdr "" b
ReactDOM.render(${1}, ${2})${0}
endsnippet

snippet cdm "react componentDidMount" b
componentDidMount() {
	${0}
}
endsnippet

snippet cwm "react componentWillMount" b
componentWillMount() {
	${0}
}
endsnippet

snippet cwum "react componentWillUnmount" b
componentWillUnmount() {
	${0}
}
endsnippet

snippet cdup "react componentDidUpdate" b
componentDidUpdate(prevProps, prevState) {
	${0}
}
endsnippet

snippet cwr "react componentWillReceiveProps" b
componentWillReceiveProps(nextProps) {
	${0}
}
endsnippet

snippet cwu "react componentWillUpdate" b
componentWillUpdate(nextProps, nextState)) {
	${0}
}
endsnippet

snippet state "react state" w
state = {
	${0}
}
endsnippet

snippet sets "react setState" w
setState({
	${0}
})
endsnippet

snippet ts "this state" w
this.state.${0}
endsnippet

snippet tp "this state" w
this.props.${0}
endsnippet
