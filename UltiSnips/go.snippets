priority -5

# package
snippet /^pa(ckage)?/ "Package declaration" r
package ${1:main}
endsnippet

# import
snippet /^im(port)/ "Import declaration" r
import (
	"${1:fmt}"
)
${0}
endsnippet

# types and variable
snippet : "Variable declaration" b
${1:name} := ${2:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name} ${2:type}
endsnippet

snippet vars "Variables declaration" b
var (
	${0}
)
endsnippet

snippet map "Map type" b
map[${1:key}]${2:value}
endsnippet

snippet /st(ruct)?/ "Struct declaration" r
type ${1} struct {
	${0:${VISUAL}}
}
endsnippet

# tag
snippet json "JSON tag"
${1:${VISUAL}} ${2:type} \`json:"`!p
import re
snip.rv = re.sub(r'([A-Z]+)', r'_\1', t[1]).lower().lstrip('_')
`"\`
endsnippet

snippet sql "SQL tag"
${1:${VISUAL}} ${2:type} \`sql:"`!p
import re
snip.rv = re.sub(r'([A-Z]+)', r'_\1', t[1]).lower().lstrip('_')
`"\`
endsnippet

snippet tag "add tag"
\`${1:tagName}:"${2}"\`
endsnippet

# if statement
snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet ife "If-else statement" b
if ${1:condition}${1/(.+)/ /}{
	${2:${VISUAL}}
} else {
	${0}
}
endsnippet

snippet else "Else statement" b
else {
	${0:${VISUAL}}
}
endsnippet

# for
snippet for "For statement" b
for ${1:condtion}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

# switch
snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case $0
}
endsnippet

# functions
snippet main "Main function" b
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet /^me(thod)?/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(w http.ResponseWriter, r *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# error handling
snippet err "Basic error handling" b
if err != nil {
	${0}
}
endsnippet

# vim: ft=snippets:
