priority -5

# package
snippet /^pa(ckage)?/ "" r
package ${1:main}
${0}
endsnippet


# import
snippet /^im(port)?$/ "" r
import (
	${0}
)
endsnippet


# variable/constant
snippet v "" b
var ${1} ${0}
endsnippet

snippet c  "" b
const ${1} = ${0}
endsnippet

snippet varb "" b
var (
	${0}
)
endsnippet

snippet conb "" b
const (
	${0}
)
endsnippet


# type
snippet /\bt(ype)?/ "" r
type ${1} ${0}
endsnippet

snippet /\bch(an)?/ "" r
chan ${0}
endsnippet


# abbriveate
snippet /\b\s*:\s*/ "" r
 := ${0}
endsnippet

snippet /\(/ "" r
(${1})${0}
endsnippet

snippet /\[/ "" r
[${1}]${0}
endsnippet

snippet /\"/ "" r
"${1}"${0}
endsnippet

snippet s "" w
string${0}
endsnippet

snippet r "" w
return ${0}
endsnippet

snippet df "" b
defer ${0}
endsnippet

snippet go "" w
go func() {
	${0}
}()
endsnippet

snippet tr "" w
true
endsnippet

snippet f "" w
false
endsnippet

snippet b "" w
bool
endsnippet

snippet i "" w
int
endsnippet

snippet int "" w
int64
endsnippet

snippet ui "" w
uint
endsnippet

snippet uint "" w
uint64
endsnippet

snippet fl "" w
float
endsnippet

snippet float "" w
float64
endsnippet

snippet e "" w
error
endsnippet

snippet br "" b
break
endsnippet

snippet cn "" b
continue
endsnippet

# condition statement
snippet if "" b
if ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet ife "" b
if ${1} {
	${0}
} else {
}
endsnippet

snippet /(}\s*)?\bel(se)?/ "" r
`!p
if match.group(0).startswith('}'):
	snip.rv = '} '
`else {
	${1}
}
endsnippet

snippet /(}\s*)?\belif/ "" r
`!p
if match.group(0).startswith('}'):
	snip.rv = '} '
`else if ${1} {
	${0}
}
endsnippet

snippet err "" w
if err != nil {
	${0}
}
endsnippet

snippet errn "" w
errors.New("${1}")${0}
endsnippet

snippet /(\w+)\.ok/ "" r
${2}, ok := `!p
snip.rv = match.group(1)
`.(${1})
if !ok {
	${0}
}
endsnippet


# loop statement
snippet for "" b
for ${1}${1/.+/ /}{
	${0}
}
endsnippet

snippet ran "" b
for ${1:_}${2/.+/, /}${2} := range ${3:`!p
v = t[2]
if v == '':
	v = ''
elif re.compile(r'[^aiueo]y$').search(v):
	v = v[:-1] + 'ies'
elif re.compile(r'(s|z|sh|ch|x)\Z').search(v):
	v = v + 'es'
else:
	v = v + 's'
snip.rv = v
`} {
	${0}
}
endsnippet



# switch / select
snippet /\bsw(itch)?/ "" r
switch ${1} {
	$0
}
endsnippet

snippet /\bsele(ct)?/ "" r
select {
	$0
}
endsnippet


# struct
snippet /\bst(ruct)?/ "" r
struct {
	${0}
}
endsnippet


# interface
snippet /\bin(terface)?/ "" r
interface{}${0}
endsnippet

# map
snippet /map/ "" r
map[${1}]${0}
endsnippet


# function
snippet fn "" w
func ${1}(${2}) ${3/([^,])*(,)?.*/(?2:\()/}${3}${3/([^,])*(,)?.*/(?2:\))/}${3/.+/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet main "" b
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /\bl(en)?/ "" r
len(${1})${0}
endsnippet

snippet new "" w
new(${1})${0}
endsnippet

snippet /\bmake(c?)(\d*)/ "" r
make(`!p
m = match.group(1)
if m == 'c':
	snip.rv = 'chan '
else:
	m = match.group(2)
	if len(m) > 0:
		snip.rv = '[]'
`${1}`!p
m = match.group(2)
if len(m) > 0:
	snip.rv = ', ' + m
`)${0}
endsnippet

snippet delete "" w
delete(${1})${0}
endsnippet

snippet close "" w
close(${1})${0}
endsnippet

snippet panic "" w
panic(${1})${0}
endsnippet

snippet /\b([\w\.]+)\s*[.=]ap?/ "" r
`!p snip.rv = match.group(1)` = append(`!p snip.rv = match.group(1)`, ${1})${0}
endsnippet


# method
snippet m "method" b
func (${2:${1/([\W\d_]|(?<!\b)[a-z])?([A-Z])?/(?1:)(?2:\l$2)/g}} *${1}) ${3}(${4}) ${5/([^,])*(,)?.*/(?2:\()/}${5}${5/([^,])*(,)?.*/(?2:\))/}${5/.+/ /}{
	${0:${VISUAL}}
}
endsnippet

# test
snippet test "" b
func Test${1}(t *testing.T) {
	${0}
}
endsnippet

snippet te "" b
t.Error(${1})${0}
endsnippet

snippet tef "" b
t.Errorf("${1}"${1/([^%]|%%)*(%.)?.*/(?2:, :\))/}$2${1/([^%]|%%)*(%.)?.*/(?2:\))/}
endsnippet

snippet tf "" b
t.Fatal(${1})${0}
endsnippet

snippet tff "" b
t.Fatalf("${1}"${1/([^%]|%%)*(%.)?.*/(?2:, :\))/}$2${1/([^%]|%%)*(%.)?.*/(?2:\))/}
endsnippet

# fmt
snippet fp "" b
fmt.Print(${1:${VISUAL}})${0}
endsnippet

snippet ff "" b
fmt.Printf("${1}"${1/([^%]|%%)*(%.)?.*/(?2:, :\))/}$2${1/([^%]|%%)*(%.)?.*/(?2:\))/}
endsnippet

snippet ln "" b
fmt.Println(${1:${VISUAL}})${0}
endsnippet

snippet sp "" w
fmt.Sprintf("${2}"${2/([^%]|%%)*(%.)?.*/(?2:, :\))/}$3${2/([^%]|%%)*(%.)?.*/(?2:\))/}
endsnippet

# http
snippet han "" w
func ${1}(w http.ResponseWriter, r *http.Request) {
	${0}
}
endsnippet
# vim: ft=snippets:
